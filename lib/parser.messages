prog: TRUE
##
## Ends in an error in state: 0.
##
## prog' -> . prog [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: WHILE WHILE
##
## Ends in an error in state: 1.
##
## command -> WHILE . LPAREN expr RPAREN LBRACE command RBRACE [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## WHILE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: WHILE LPAREN WHILE
##
## Ends in an error in state: 2.
##
## command -> WHILE LPAREN . expr RPAREN LBRACE command RBRACE [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## WHILE LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR ASSIGN VAR WHILE
##
## Ends in an error in state: 3.
##
## expr -> VAR . [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## func_call -> VAR . LPAREN elem RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## func_call -> VAR . LPAREN RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## VAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR LPAREN WHILE
##
## Ends in an error in state: 4.
##
## func_call -> VAR LPAREN . elem RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## func_call -> VAR LPAREN . RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## VAR LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR ASSIGN NOT WHILE
##
## Ends in an error in state: 9.
##
## expr -> NOT . expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## NOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR ASSIGN LPAREN WHILE
##
## Ends in an error in state: 10.
##
## expr -> LPAREN . expr RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR ASSIGN LEN WHILE
##
## Ends in an error in state: 11.
##
## expr -> LEN . LPAREN expr RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## LEN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR ASSIGN LEN LPAREN WHILE
##
## Ends in an error in state: 12.
##
## expr -> LEN LPAREN . expr RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## LEN LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR ASSIGN LBRACKET WHILE
##
## Ends in an error in state: 13.
##
## lst -> LBRACKET . RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## lst -> LBRACKET . elem RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR LPAREN CHAR SEMICOLON
##
## Ends in an error in state: 19.
##
## elem -> expr . [ RPAREN RBRACKET ]
## elem -> expr . COMMA elem [ RPAREN RBRACKET ]
## expr -> expr . PLUS expr [ TIMES RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . MINUS expr [ TIMES RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . TIMES expr [ TIMES RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . DIVIDE expr [ TIMES RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . MOD expr [ TIMES RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . LT expr [ TIMES RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . GT expr [ TIMES RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . LEQ expr [ TIMES RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . GEQ expr [ TIMES RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . EQ expr [ TIMES RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . NEQ expr [ TIMES RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . AND expr [ TIMES RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . OR expr [ TIMES RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . LBRACKET expr RBRACKET [ TIMES RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR ASSIGN CHAR TIMES WHILE
##
## Ends in an error in state: 20.
##
## expr -> expr TIMES . expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr TIMES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR ASSIGN CHAR PLUS WHILE
##
## Ends in an error in state: 22.
##
## expr -> expr PLUS . expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR ASSIGN CHAR PLUS CHAR WHILE
##
## Ends in an error in state: 23.
##
## expr -> expr . PLUS expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr PLUS expr . [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . MINUS expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . TIMES expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . DIVIDE expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . MOD expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . LT expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . GT expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . LEQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . GEQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . EQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . NEQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . AND expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . OR expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . LBRACKET expr RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr PLUS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR ASSIGN CHAR MOD WHILE
##
## Ends in an error in state: 24.
##
## expr -> expr MOD . expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr MOD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR ASSIGN CHAR DIVIDE WHILE
##
## Ends in an error in state: 26.
##
## expr -> expr DIVIDE . expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr DIVIDE
##

<YOUR Sstring_of_int pos.pos_lnum string_of_int pos.pos_lnum YNTAX ERROR MESSAGE HERE>

prog: VAR ASSIGN CHAR OR WHILE
##
## Ends in an error in state: 28.
##
## expr -> expr OR . expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr OR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR ASSIGN CHAR OR CHAR WHILE
##
## Ends in an error in state: 29.
##
## expr -> expr . PLUS expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . MINUS expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . TIMES expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . DIVIDE expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . MOD expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . LT expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . GT expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . LEQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . GEQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . EQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . NEQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . AND expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . OR expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr OR expr . [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . LBRACKET expr RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr OR expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR ASSIGN CHAR NEQ WHILE
##
## Ends in an error in state: 30.
##
## expr -> expr NEQ . expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr NEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR ASSIGN CHAR NEQ CHAR WHILE
##
## Ends in an error in state: 31.
##
## expr -> expr . PLUS expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . MINUS expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . TIMES expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . DIVIDE expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . MOD expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . LT expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . GT expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . LEQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . GEQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . EQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . NEQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr NEQ expr . [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . AND expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . OR expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . LBRACKET expr RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr NEQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR ASSIGN CHAR MINUS WHILE
##
## Ends in an error in state: 32.
##
## expr -> expr MINUS . expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR ASSIGN CHAR MINUS CHAR WHILE
##
## Ends in an error in state: 33.
##
## expr -> expr . PLUS expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . MINUS expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr MINUS expr . [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . TIMES expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . DIVIDE expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . MOD expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . LT expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . GT expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . LEQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . GEQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . EQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . NEQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . AND expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . OR expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . LBRACKET expr RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr MINUS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR ASSIGN CHAR LT WHILE
##
## Ends in an error in state: 34.
##
## expr -> expr LT . expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR ASSIGN CHAR LT CHAR WHILE
##
## Ends in an error in state: 35.
##
## expr -> expr . PLUS expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . MINUS expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . TIMES expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . DIVIDE expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . MOD expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . LT expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr LT expr . [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . GT expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . LEQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . GEQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . EQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . NEQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . AND expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . OR expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . LBRACKET expr RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr LT expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR ASSIGN CHAR EQ WHILE
##
## Ends in an error in state: 36.
##
## expr -> expr EQ . expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR ASSIGN CHAR EQ CHAR WHILE
##
## Ends in an error in state: 37.
##
## expr -> expr . PLUS expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . MINUS expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . TIMES expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . DIVIDE expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . MOD expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . LT expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . GT expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . LEQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . GEQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . EQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr EQ expr . [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . NEQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . AND expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . OR expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . LBRACKET expr RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR ASSIGN CHAR LEQ WHILE
##
## Ends in an error in state: 38.
##
## expr -> expr LEQ . expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr LEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR ASSIGN CHAR LEQ CHAR WHILE
##
## Ends in an error in state: 39.
##
## expr -> expr . PLUS expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . MINUS expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . TIMES expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . DIVIDE expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . MOD expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . LT expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . GT expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . LEQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr LEQ expr . [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . GEQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . EQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . NEQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . AND expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . OR expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . LBRACKET expr RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr LEQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR ASSIGN CHAR GT WHILE
##
## Ends in an error in state: 40.
##
## expr -> expr GT . expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR ASSIGN CHAR GT CHAR WHILE
##
## Ends in an error in state: 41.
##
## expr -> expr . PLUS expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . MINUS expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . TIMES expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . DIVIDE expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . MOD expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . LT expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . GT expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr GT expr . [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . LEQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . GEQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . EQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . NEQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . AND expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . OR expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . LBRACKET expr RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr GT expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR ASSIGN CHAR GEQ WHILE
##
## Ends in an error in state: 42.
##
## expr -> expr GEQ . expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr GEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR ASSIGN CHAR GEQ CHAR WHILE
##
## Ends in an error in state: 43.
##
## expr -> expr . PLUS expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . MINUS expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . TIMES expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . DIVIDE expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . MOD expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . LT expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . GT expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . LEQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . GEQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr GEQ expr . [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . EQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . NEQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . AND expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . OR expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . LBRACKET expr RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr GEQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR ASSIGN CHAR LBRACKET WHILE
##
## Ends in an error in state: 44.
##
## expr -> expr LBRACKET . expr RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR ASSIGN CHAR LBRACKET CHAR SEMICOLON
##
## Ends in an error in state: 45.
##
## expr -> expr . PLUS expr [ TIMES RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . MINUS expr [ TIMES RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . TIMES expr [ TIMES RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . DIVIDE expr [ TIMES RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . MOD expr [ TIMES RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . LT expr [ TIMES RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . GT expr [ TIMES RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . LEQ expr [ TIMES RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . GEQ expr [ TIMES RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . EQ expr [ TIMES RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . NEQ expr [ TIMES RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . AND expr [ TIMES RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . OR expr [ TIMES RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . LBRACKET expr RBRACKET [ TIMES RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr LBRACKET expr . RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr LBRACKET expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR ASSIGN CHAR AND WHILE
##
## Ends in an error in state: 47.
##
## expr -> expr AND . expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr AND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR ASSIGN CHAR AND CHAR WHILE
##
## Ends in an error in state: 48.
##
## expr -> expr . PLUS expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . MINUS expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . TIMES expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . DIVIDE expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . MOD expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . LT expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . GT expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . LEQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . GEQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . EQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . NEQ expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . AND expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr AND expr . [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . OR expr [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . LBRACKET expr RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr AND expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR LPAREN CHAR COMMA WHILE
##
## Ends in an error in state: 49.
##
## elem -> expr COMMA . elem [ RPAREN RBRACKET ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR ASSIGN LBRACKET CHAR RPAREN
##
## Ends in an error in state: 51.
##
## lst -> LBRACKET elem . RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## LBRACKET elem
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 19, spurious reduction of production elem -> expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR ASSIGN LEN LPAREN CHAR SEMICOLON
##
## Ends in an error in state: 53.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . DIVIDE expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . MOD expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . LT expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . GT expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . LEQ expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . GEQ expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . EQ expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . NEQ expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . AND expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . OR expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . LBRACKET expr RBRACKET [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> LEN LPAREN expr . RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## LEN LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR ASSIGN LPAREN CHAR SEMICOLON
##
## Ends in an error in state: 55.
##
## expr -> LPAREN expr . RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . DIVIDE expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . MOD expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . LT expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . GT expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . LEQ expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . GEQ expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . EQ expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . NEQ expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . AND expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . OR expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . LBRACKET expr RBRACKET [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
##
## The known suffix of the stack is as follows:
## LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR LPAREN CHAR RBRACKET
##
## Ends in an error in state: 58.
##
## func_call -> VAR LPAREN elem . RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## VAR LPAREN elem
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 19, spurious reduction of production elem -> expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: WHILE LPAREN CHAR SEMICOLON
##
## Ends in an error in state: 60.
##
## command -> WHILE LPAREN expr . RPAREN LBRACE command RBRACE [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . DIVIDE expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . MOD expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . LT expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . GT expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . LEQ expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . GEQ expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . EQ expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . NEQ expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . AND expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . OR expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . LBRACKET expr RBRACKET [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
##
## The known suffix of the stack is as follows:
## WHILE LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: WHILE LPAREN CHAR RPAREN WHILE
##
## Ends in an error in state: 61.
##
## command -> WHILE LPAREN expr RPAREN . LBRACE command RBRACE [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## WHILE LPAREN expr RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: WHILE LPAREN CHAR RPAREN LBRACE TRUE
##
## Ends in an error in state: 62.
##
## command -> WHILE LPAREN expr RPAREN LBRACE . command RBRACE [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## WHILE LPAREN expr RPAREN LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR WHILE
##
## Ends in an error in state: 63.
##
## func_call -> VAR . LPAREN elem RPAREN [ SEMICOLON ]
## func_call -> VAR . LPAREN RPAREN [ SEMICOLON ]
## var -> VAR . [ ASSIGN ]
## var -> VAR . COLON ptype [ ASSIGN ]
##
## The known suffix of the stack is as follows:
## VAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR COLON WHILE
##
## Ends in an error in state: 64.
##
## var -> VAR COLON . ptype [ RPAREN COMMA ASSIGN ]
##
## The known suffix of the stack is as follows:
## VAR COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: READ WHILE
##
## Ends in an error in state: 73.
##
## command -> READ . LPAREN var RPAREN SEMICOLON [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## READ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: READ LPAREN WHILE
##
## Ends in an error in state: 74.
##
## command -> READ LPAREN . var RPAREN SEMICOLON [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## READ LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CONVERT LPAREN VAR WHILE
##
## Ends in an error in state: 75.
##
## var -> VAR . [ RPAREN COMMA ]
## var -> VAR . COLON ptype [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## VAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: READ LPAREN VAR COMMA
##
## Ends in an error in state: 76.
##
## command -> READ LPAREN var . RPAREN SEMICOLON [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## READ LPAREN var
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 75, spurious reduction of production var -> VAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: READ LPAREN VAR RPAREN WHILE
##
## Ends in an error in state: 77.
##
## command -> READ LPAREN var RPAREN . SEMICOLON [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## READ LPAREN var RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PRINT WHILE
##
## Ends in an error in state: 79.
##
## command -> PRINT . LPAREN expr RPAREN SEMICOLON [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## PRINT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PRINT LPAREN WHILE
##
## Ends in an error in state: 80.
##
## command -> PRINT LPAREN . expr RPAREN SEMICOLON [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## PRINT LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PRINT LPAREN CHAR SEMICOLON
##
## Ends in an error in state: 81.
##
## command -> PRINT LPAREN expr . RPAREN SEMICOLON [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . DIVIDE expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . MOD expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . LT expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . GT expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . LEQ expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . GEQ expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . EQ expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . NEQ expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . AND expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . OR expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . LBRACKET expr RBRACKET [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
##
## The known suffix of the stack is as follows:
## PRINT LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PRINT LPAREN CHAR RPAREN WHILE
##
## Ends in an error in state: 82.
##
## command -> PRINT LPAREN expr RPAREN . SEMICOLON [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## PRINT LPAREN expr RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PASS WHILE
##
## Ends in an error in state: 84.
##
## command -> PASS . SEMICOLON [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## PASS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LPAREN TRUE
##
## Ends in an error in state: 86.
##
## command -> LPAREN . command RPAREN [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF WHILE
##
## Ends in an error in state: 87.
##
## command -> IF . LPAREN expr RPAREN LBRACE command RBRACE ELSE LBRACE command RBRACE [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF LPAREN WHILE
##
## Ends in an error in state: 88.
##
## command -> IF LPAREN . expr RPAREN LBRACE command RBRACE ELSE LBRACE command RBRACE [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## IF LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF LPAREN CHAR SEMICOLON
##
## Ends in an error in state: 89.
##
## command -> IF LPAREN expr . RPAREN LBRACE command RBRACE ELSE LBRACE command RBRACE [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . DIVIDE expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . MOD expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . LT expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . GT expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . LEQ expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . GEQ expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . EQ expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . NEQ expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . AND expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . OR expr [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . LBRACKET expr RBRACKET [ TIMES RPAREN PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF LPAREN CHAR RPAREN WHILE
##
## Ends in an error in state: 90.
##
## command -> IF LPAREN expr RPAREN . LBRACE command RBRACE ELSE LBRACE command RBRACE [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF LPAREN CHAR RPAREN LBRACE TRUE
##
## Ends in an error in state: 91.
##
## command -> IF LPAREN expr RPAREN LBRACE . command RBRACE ELSE LBRACE command RBRACE [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr RPAREN LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNCTION WHILE
##
## Ends in an error in state: 92.
##
## func_def -> FUNCTION . VAR LPAREN param RPAREN COLON ptype LBRACE func_body RBRACE [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
## func_def -> FUNCTION . VAR LPAREN RPAREN COLON ptype LBRACE func_body RBRACE [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## FUNCTION
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNCTION VAR WHILE
##
## Ends in an error in state: 93.
##
## func_def -> FUNCTION VAR . LPAREN param RPAREN COLON ptype LBRACE func_body RBRACE [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
## func_def -> FUNCTION VAR . LPAREN RPAREN COLON ptype LBRACE func_body RBRACE [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## FUNCTION VAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNCTION VAR LPAREN WHILE
##
## Ends in an error in state: 94.
##
## func_def -> FUNCTION VAR LPAREN . param RPAREN COLON ptype LBRACE func_body RBRACE [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
## func_def -> FUNCTION VAR LPAREN . RPAREN COLON ptype LBRACE func_body RBRACE [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## FUNCTION VAR LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNCTION VAR LPAREN VAR WHILE
##
## Ends in an error in state: 95.
##
## typed_var -> VAR . COLON ptype [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## VAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNCTION VAR LPAREN VAR COLON WHILE
##
## Ends in an error in state: 96.
##
## typed_var -> VAR COLON . ptype [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## VAR COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNCTION VAR LPAREN RPAREN WHILE
##
## Ends in an error in state: 98.
##
## func_def -> FUNCTION VAR LPAREN RPAREN . COLON ptype LBRACE func_body RBRACE [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## FUNCTION VAR LPAREN RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNCTION VAR LPAREN RPAREN COLON WHILE
##
## Ends in an error in state: 99.
##
## func_def -> FUNCTION VAR LPAREN RPAREN COLON . ptype LBRACE func_body RBRACE [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## FUNCTION VAR LPAREN RPAREN COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNCTION VAR LPAREN RPAREN COLON TBOOL WHILE
##
## Ends in an error in state: 100.
##
## func_def -> FUNCTION VAR LPAREN RPAREN COLON ptype . LBRACE func_body RBRACE [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## FUNCTION VAR LPAREN RPAREN COLON ptype
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNCTION VAR LPAREN RPAREN COLON TBOOL LBRACE TRUE
##
## Ends in an error in state: 101.
##
## func_def -> FUNCTION VAR LPAREN RPAREN COLON ptype LBRACE . func_body RBRACE [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## FUNCTION VAR LPAREN RPAREN COLON ptype LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CONVERT WHILE
##
## Ends in an error in state: 102.
##
## command -> CONVERT . LPAREN var COMMA ptype RPAREN SEMICOLON [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## CONVERT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CONVERT LPAREN WHILE
##
## Ends in an error in state: 103.
##
## command -> CONVERT LPAREN . var COMMA ptype RPAREN SEMICOLON [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## CONVERT LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CONVERT LPAREN VAR RPAREN
##
## Ends in an error in state: 104.
##
## command -> CONVERT LPAREN var . COMMA ptype RPAREN SEMICOLON [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## CONVERT LPAREN var
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 75, spurious reduction of production var -> VAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CONVERT LPAREN VAR COMMA WHILE
##
## Ends in an error in state: 105.
##
## command -> CONVERT LPAREN var COMMA . ptype RPAREN SEMICOLON [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## CONVERT LPAREN var COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CONVERT LPAREN VAR COMMA TBOOL WHILE
##
## Ends in an error in state: 106.
##
## command -> CONVERT LPAREN var COMMA ptype . RPAREN SEMICOLON [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## CONVERT LPAREN var COMMA ptype
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CONVERT LPAREN VAR COMMA TBOOL RPAREN WHILE
##
## Ends in an error in state: 107.
##
## command -> CONVERT LPAREN var COMMA ptype RPAREN . SEMICOLON [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## CONVERT LPAREN var COMMA ptype RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR COLON TBOOL WHILE
##
## Ends in an error in state: 109.
##
## command -> var . ASSIGN expr SEMICOLON [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## var
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR ASSIGN WHILE
##
## Ends in an error in state: 110.
##
## command -> var ASSIGN . expr SEMICOLON [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## var ASSIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR ASSIGN CHAR RPAREN
##
## Ends in an error in state: 111.
##
## command -> var ASSIGN expr . SEMICOLON [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
## expr -> expr . PLUS expr [ TIMES SEMICOLON PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . MINUS expr [ TIMES SEMICOLON PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . TIMES expr [ TIMES SEMICOLON PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . DIVIDE expr [ TIMES SEMICOLON PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . MOD expr [ TIMES SEMICOLON PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . LT expr [ TIMES SEMICOLON PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . GT expr [ TIMES SEMICOLON PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . LEQ expr [ TIMES SEMICOLON PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . GEQ expr [ TIMES SEMICOLON PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . EQ expr [ TIMES SEMICOLON PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . NEQ expr [ TIMES SEMICOLON PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . AND expr [ TIMES SEMICOLON PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . OR expr [ TIMES SEMICOLON PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . LBRACKET expr RBRACKET [ TIMES SEMICOLON PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
##
## The known suffix of the stack is as follows:
## var ASSIGN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR LPAREN RPAREN WHILE
##
## Ends in an error in state: 114.
##
## command -> func_call . SEMICOLON [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## func_call
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNCTION VAR LPAREN RPAREN COLON TBOOL LBRACE PASS SEMICOLON RETURN CHAR SEMICOLON WHILE
##
## Ends in an error in state: 116.
##
## func_def -> FUNCTION VAR LPAREN RPAREN COLON ptype LBRACE func_body . RBRACE [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## FUNCTION VAR LPAREN RPAREN COLON ptype LBRACE func_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNCTION VAR LPAREN RPAREN COLON TBOOL LBRACE PASS SEMICOLON RPAREN
##
## Ends in an error in state: 118.
##
## command -> command . command [ WHILE VAR RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION CONVERT ]
## func_body -> command . [ RBRACE ]
## func_body -> command . RETURN expr SEMICOLON [ RBRACE ]
##
## The known suffix of the stack is as follows:
## command
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNCTION VAR LPAREN RPAREN COLON TBOOL LBRACE PASS SEMICOLON RETURN WHILE
##
## Ends in an error in state: 119.
##
## func_body -> command RETURN . expr SEMICOLON [ RBRACE ]
##
## The known suffix of the stack is as follows:
## command RETURN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNCTION VAR LPAREN RPAREN COLON TBOOL LBRACE PASS SEMICOLON RETURN CHAR RPAREN
##
## Ends in an error in state: 120.
##
## expr -> expr . PLUS expr [ TIMES SEMICOLON PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . MINUS expr [ TIMES SEMICOLON PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . TIMES expr [ TIMES SEMICOLON PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . DIVIDE expr [ TIMES SEMICOLON PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . MOD expr [ TIMES SEMICOLON PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . LT expr [ TIMES SEMICOLON PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . GT expr [ TIMES SEMICOLON PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . LEQ expr [ TIMES SEMICOLON PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . GEQ expr [ TIMES SEMICOLON PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . EQ expr [ TIMES SEMICOLON PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . NEQ expr [ TIMES SEMICOLON PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . AND expr [ TIMES SEMICOLON PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . OR expr [ TIMES SEMICOLON PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## expr -> expr . LBRACKET expr RBRACKET [ TIMES SEMICOLON PLUS OR NEQ MOD MINUS LT LEQ LBRACKET GT GEQ EQ DIVIDE AND ]
## func_body -> command RETURN expr . SEMICOLON [ RBRACE ]
##
## The known suffix of the stack is as follows:
## command RETURN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PASS SEMICOLON PASS SEMICOLON TRUE
##
## Ends in an error in state: 122.
##
## command -> command . command [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
## command -> command command . [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## command command
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNCTION VAR LPAREN VAR COLON TBOOL WHILE
##
## Ends in an error in state: 123.
##
## param -> typed_var . [ RPAREN ]
## param -> typed_var . COMMA param [ RPAREN ]
##
## The known suffix of the stack is as follows:
## typed_var
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNCTION VAR LPAREN VAR COLON TBOOL COMMA WHILE
##
## Ends in an error in state: 124.
##
## param -> typed_var COMMA . param [ RPAREN ]
##
## The known suffix of the stack is as follows:
## typed_var COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNCTION VAR LPAREN VAR COLON TBOOL RPAREN WHILE
##
## Ends in an error in state: 127.
##
## func_def -> FUNCTION VAR LPAREN param RPAREN . COLON ptype LBRACE func_body RBRACE [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## FUNCTION VAR LPAREN param RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNCTION VAR LPAREN VAR COLON TBOOL RPAREN COLON WHILE
##
## Ends in an error in state: 128.
##
## func_def -> FUNCTION VAR LPAREN param RPAREN COLON . ptype LBRACE func_body RBRACE [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## FUNCTION VAR LPAREN param RPAREN COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNCTION VAR LPAREN VAR COLON TBOOL RPAREN COLON TBOOL WHILE
##
## Ends in an error in state: 129.
##
## func_def -> FUNCTION VAR LPAREN param RPAREN COLON ptype . LBRACE func_body RBRACE [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## FUNCTION VAR LPAREN param RPAREN COLON ptype
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNCTION VAR LPAREN VAR COLON TBOOL RPAREN COLON TBOOL LBRACE TRUE
##
## Ends in an error in state: 130.
##
## func_def -> FUNCTION VAR LPAREN param RPAREN COLON ptype LBRACE . func_body RBRACE [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## FUNCTION VAR LPAREN param RPAREN COLON ptype LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNCTION VAR LPAREN VAR COLON TBOOL RPAREN COLON TBOOL LBRACE PASS SEMICOLON RETURN CHAR SEMICOLON WHILE
##
## Ends in an error in state: 131.
##
## func_def -> FUNCTION VAR LPAREN param RPAREN COLON ptype LBRACE func_body . RBRACE [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## FUNCTION VAR LPAREN param RPAREN COLON ptype LBRACE func_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF LPAREN CHAR RPAREN LBRACE PASS SEMICOLON RPAREN
##
## Ends in an error in state: 133.
##
## command -> IF LPAREN expr RPAREN LBRACE command . RBRACE ELSE LBRACE command RBRACE [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
## command -> command . command [ WHILE VAR READ RBRACE PRINT PASS LPAREN IF FUNCTION CONVERT ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr RPAREN LBRACE command
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF LPAREN CHAR RPAREN LBRACE PASS SEMICOLON RBRACE WHILE
##
## Ends in an error in state: 134.
##
## command -> IF LPAREN expr RPAREN LBRACE command RBRACE . ELSE LBRACE command RBRACE [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr RPAREN LBRACE command RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF LPAREN CHAR RPAREN LBRACE PASS SEMICOLON RBRACE ELSE WHILE
##
## Ends in an error in state: 135.
##
## command -> IF LPAREN expr RPAREN LBRACE command RBRACE ELSE . LBRACE command RBRACE [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr RPAREN LBRACE command RBRACE ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF LPAREN CHAR RPAREN LBRACE PASS SEMICOLON RBRACE ELSE LBRACE TRUE
##
## Ends in an error in state: 136.
##
## command -> IF LPAREN expr RPAREN LBRACE command RBRACE ELSE LBRACE . command RBRACE [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr RPAREN LBRACE command RBRACE ELSE LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF LPAREN CHAR RPAREN LBRACE PASS SEMICOLON RBRACE ELSE LBRACE PASS SEMICOLON RPAREN
##
## Ends in an error in state: 137.
##
## command -> IF LPAREN expr RPAREN LBRACE command RBRACE ELSE LBRACE command . RBRACE [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
## command -> command . command [ WHILE VAR READ RBRACE PRINT PASS LPAREN IF FUNCTION CONVERT ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr RPAREN LBRACE command RBRACE ELSE LBRACE command
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LPAREN PASS SEMICOLON RETURN
##
## Ends in an error in state: 139.
##
## command -> LPAREN command . RPAREN [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
## command -> command . command [ WHILE VAR RPAREN READ PRINT PASS LPAREN IF FUNCTION CONVERT ]
##
## The known suffix of the stack is as follows:
## LPAREN command
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: WHILE LPAREN CHAR RPAREN LBRACE PASS SEMICOLON RPAREN
##
## Ends in an error in state: 141.
##
## command -> WHILE LPAREN expr RPAREN LBRACE command . RBRACE [ WHILE VAR RPAREN RETURN READ RBRACE PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
## command -> command . command [ WHILE VAR READ RBRACE PRINT PASS LPAREN IF FUNCTION CONVERT ]
##
## The known suffix of the stack is as follows:
## WHILE LPAREN expr RPAREN LBRACE command
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PASS SEMICOLON RPAREN
##
## Ends in an error in state: 144.
##
## command -> command . command [ WHILE VAR READ PRINT PASS LPAREN IF FUNCTION EOF CONVERT ]
## prog -> command . EOF [ # ]
##
## The known suffix of the stack is as follows:
## command
##

<YOUR SYNTAX ERROR MESSAGE HERE>

